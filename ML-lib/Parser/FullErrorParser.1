#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 0 1
#"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 5617 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";To fix the highlighting bugs, try to replace your syntax locations"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";with the proper ones. So ML-func should get decorated with the loca"
 #"tion"
) 0 0 24 29 1 #"\n"
0 0 17 3 9 #";of \"fun\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"megaparsack"
0 0 24 3 1 #" "
0 0 14 3 16 #"megaparsack/text"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 10 #"data/monad"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 16 #"data/applicative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 10 #"for-syntax"
0 0 24 3 1 #" "
0 0 14 3 12 #"syntax/parse"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 20 #"syntax/strip-context"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 8 #"ML-parse"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 28 #"error-whitespace-insensitive"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 8 #"hidden/p"
0 0 24 3 1 #" "
0 0 14 3 7 #"space/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 28 #"error-whitespace-insensitive"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"e-nl/p"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"newline\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"or"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 7 #"space/p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"e-nl/p"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"ew-i/p"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 28 #"error-whitespace-insensitive"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"syn"
0 0 24 3 1 #" "
0 0 14 3 6 #"parser"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"do"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"syn"
0 0 24 3 1 #" "
0 0 14 3 6 #"parser"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fail/p"
0 0 24 3 2 #" ("
0 0 14 3 7 #"message"
0 0 24 3 2 #" ("
0 0 14 3 6 #"srcloc"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"())))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"acceptable-identifier-chars"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"list->string"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\_"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\-"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\+"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\\"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\*"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"many/p"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:min"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:max"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 4 #"...."
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"many/p"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:min"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:max"
0 0 24 3 1 #" "
0 0 21 3 6 #"+inf.0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 3 #"..1"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"many/p"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:min"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:max"
0 0 24 3 1 #" "
0 0 21 3 6 #"+inf.0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-in/p"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 4 #"or/p"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"reassign-id/p"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 7 #"binding"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"aa\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"#%reassign"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"binding"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-reassign-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"v\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":="
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"pure"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"reassign/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-reassign-id"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"reassign-id/p"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 15 3 17 #"default-stringify"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 2 #"~a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 15 3 17 #"default-stringify"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"NaN/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"NaN"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"#%number"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"NaN\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"comment/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\;"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"many/p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"satisfy/p"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"number/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 5 #"NaN/p"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"sign"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\-"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"Inf"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"#%number"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"Inf"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"#%number"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"-Inf\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 9 #"integer/p"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 7 #"decimal"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"?"
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"deci"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"many/p"
0 0 24 3 1 #" "
0 0 14 3 7 #"digit/p"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:min"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~a"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"."
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 4 #"deci"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"#%number"
0 0 24 3 2 #" ("
0 0 14 3 1 #"d"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 4 #"sign"
0 0 24 3 2 #") "
0 0 14 3 3 #"int"
0 0 24 3 2 #" ("
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 7 #"decimal"
0 0 24 3 10 #"))))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"whitespace-insensitive/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hidden/p"
0 0 24 3 2 #" ("
0 0 14 3 6 #"many/p"
0 0 24 3 1 #" "
0 0 14 3 7 #"space/p"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:min"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:max"
0 0 24 3 1 #" "
0 0 21 3 6 #"+inf.0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 24 #"whitespace-insensitive/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"at-least-one-whitespace/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hidden/p"
0 0 24 3 2 #" ("
0 0 14 3 6 #"many/p"
0 0 24 3 1 #" "
0 0 14 3 7 #"space/p"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:min"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:max"
0 0 24 3 1 #" "
0 0 21 3 6 #"+inf.0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"w/p"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 25 #"at-least-one-whitespace/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"at-least-one-newline/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"newline"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 7 #"space/p"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 22 #"at-least-one-newline/p"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"n/p"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 22 #"at-least-one-newline/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"special-chars/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"\\\\\\\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"pure"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;STRING PARSING"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"regular-chars/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"char-between/p"
0 0 24 3 1 #" "
0 0 21 3 7 #"#\\space"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"char-between/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\#"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\["
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"char-between/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\]"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\~"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"string-inside/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 4 #"text"
0 0 19 3 1 #" "
0 0 19 3 4 #"char"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 9 #"finishing"
0 0 19 3 6 #" quote"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"\\\""
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 5 #"chars"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/p"
0 0 24 3 1 #" "
0 0 14 3 15 #"regular-chars/p"
0 0 24 3 1 #" "
0 0 14 3 15 #"special-chars/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 15 #"string-inside/p"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"chars"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;Need to transform this so that when a special char is read"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";We take off a \\"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"user-string/p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"\\\""
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 15 #"string-inside/p"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ML-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"src"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 8 #"language"
0 0 24 3 2 #" ["
0 0 14 3 11 #"module-name"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"mod-name"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 5 #"#:let"
0 0 24 3 2 #" ["
0 0 14 3 6 #"ML-let"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 4 #"#:if"
0 0 24 3 2 #" ["
0 0 14 3 5 #"ML-if"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 6 #"#:func"
0 0 24 3 2 #" ["
0 0 14 3 7 #"ML-func"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 10 #"#:reassign"
0 0 24 3 2 #" ["
0 0 14 3 11 #"ML-reassign"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 8 #"#:lambda"
0 0 24 3 2 #" ["
0 0 14 3 9 #"ML-lambda"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 8 #"#:record"
0 0 24 3 2 #" ["
0 0 14 3 9 #"ML-record"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 3 #"#:+"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ML+"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 3 #"#:-"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ML-"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 3 #"#:/"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ML/"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 3 #"#:*"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ML*"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 4 #"#:++"
0 0 24 3 2 #" ["
0 0 14 3 4 #"ML++"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 4 #"#:=="
0 0 24 3 2 #" ["
0 0 14 3 4 #"ML=="
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 4 #"#:!="
0 0 24 3 2 #" ["
0 0 14 3 4 #"ML!="
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 3 #"#:>"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ML>"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 3 #"#:<"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ML<"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 4 #"#:<="
0 0 24 3 2 #" ["
0 0 14 3 4 #"ML<="
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 4 #"#:>="
0 0 24 3 2 #" ["
0 0 14 3 4 #"ML>="
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 5 #"#:for"
0 0 24 3 2 #" ["
0 0 14 3 6 #"ML-for"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 6 #"#:list"
0 0 24 3 2 #" ["
0 0 14 3 7 #"ML-list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 4 #"#:id"
0 0 24 3 2 #" ["
0 0 14 3 5 #"ML-id"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 8 #"#:runAll"
0 0 24 3 2 #" ["
0 0 14 3 6 #"runAll"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 23 3 8 #"#:arrays"
0 0 24 3 2 #" ["
0 0 14 3 9 #"ML-arrays"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unacceptable-ids"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 9 #"ML-lambda"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"lam"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"ML-func"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"ML-if"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"ML-if"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"ML-if"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"ML-for"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 3 #"for"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"block"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 64
#";;Wrap this in another parser that disallows certain identifiers"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #";;like our binaries, true and false, =, etc."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"raw-identifier/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"identifier"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 7 #"guard/p"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ["
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 8 #"letter/p"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ["
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"identifier"
0 0 19 3 5 #" char"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"many/p"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"char-in/p"
0 0 24 3 1 #" "
0 0 14 3 27 #"acceptable-identifier-chars"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 99
(
 #"                                                                    "
 #"                               "
) 0 0 14 3 8 #"letter/p"
0 0 24 29 1 #"\n"
0 0 24 3 99
(
 #"                                                                    "
 #"                               "
) 0 0 14 3 7 #"digit/p"
0 0 24 3 2 #") "
0 0 23 3 5 #"#:min"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:max"
0 0 24 3 1 #" "
0 0 21 3 6 #"+inf.0"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 7 #"guard/p"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 1 #"d"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #" ("
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 14 3 16 #"unacceptable-ids"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ["
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 9 #"char-in/p"
0 0 24 3 1 #" "
0 0 14 3 27 #"acceptable-identifier-chars"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ["
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"identifier"
0 0 19 3 5 #" char"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"many/p"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"char-in/p"
0 0 24 3 1 #" "
0 0 14 3 27 #"acceptable-identifier-chars"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 99
(
 #"                                                                    "
 #"                               "
) 0 0 14 3 8 #"letter/p"
0 0 24 29 1 #"\n"
0 0 24 3 99
(
 #"                                                                    "
 #"                               "
) 0 0 14 3 7 #"digit/p"
0 0 24 3 2 #") "
0 0 23 3 5 #"#:min"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:max"
0 0 24 3 1 #" "
0 0 21 3 6 #"+inf.0"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 7 #"guard/p"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 1 #"d"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #" ("
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                   ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 16 #"char-alphabetic?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#f"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                   ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 9 #"dict-keys"
0 0 24 3 1 #" "
0 0 14 3 18 #"binary-op-builtins"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Inf"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"-Inf"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"NaN"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"identifier/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 16 #"raw-identifier/p"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"#%id"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"strip-id"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"syntax->list"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"function/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"fun\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"w/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 8 #"fun-name"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 16 #"raw-identifier/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 13 #"fun-arguments"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 16 #"error-sequence/p"
0 0 24 3 1 #" "
0 0 14 3 16 #"raw-identifier/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\:"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 42 #";NOT DOING THIS GETS YOU INTO BIG TROUBLE:"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 28 #";1: HIGHLIGHTING WILL BE OFF"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 47 #";2: SYNTAX PARAMETERS will take the WRONG VALUE"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 66
#";This says, keep your regular context, but know that your location"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 34 #";is the location of the fun string"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 6 #"#%func"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-name"
0 0 24 3 1 #" "
0 0 14 3 13 #"fun-arguments"
0 0 24 3 2 #") "
0 0 14 3 5 #"block"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";;;;INFIX NOTATION PARSING ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 55 #";precednce levels (does not support right assosciative)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"precedence-level"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"("
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 21 3 6 #"-inf.0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 14 #"precedence-ops"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dict-keys"
0 0 24 3 1 #" "
0 0 14 3 18 #"binary-op-builtins"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"op->syntax"
0 0 24 3 1 #" "
0 0 14 3 6 #"str-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"datum->syntax"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 6 #"str-op"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"#%"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 6 #"str-op"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 115
(
 #";now that the values ar ejust true and false, later you can just mak"
 #"e this the dict keys instead of the whole thing"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"binary-op-builtins"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"foldr"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"++"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"ML++"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"+"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"ML+"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"-"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"ML-"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"/"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"ML/"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"*"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"ML*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 69
(
 #"                                                                    "
 #"("
) 0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"!="
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"ML!="
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<="
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"ML<="
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 3 #"\">="
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"ML>="
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\">"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"ML>"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"<"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"ML<"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 69
(
 #"                                                                    "
 #"("
) 0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=="
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"ML=="
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"precedence-ops"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"*"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"/"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"operator/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"operator"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 3 #"w/p"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-in/p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dict-keys"
0 0 24 3 1 #" "
0 0 14 3 18 #"binary-op-builtins"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 3 #"w/p"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"pure"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"whitespace-prefixed-op/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"operator"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ["
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-in/p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dict-keys"
0 0 24 3 1 #" "
0 0 14 3 18 #"binary-op-builtins"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 3 #"w/p"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"pure"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"to-prefix-notation"
0 0 24 3 1 #" "
0 0 14 3 12 #"postfix-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"h-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"h-list"
0 0 24 3 3 #") ("
0 0 14 3 9 #"dict-keys"
0 0 24 3 1 #" "
0 0 14 3 18 #"binary-op-builtins"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 10 #"let-values"
0 0 24 3 4 #" ([("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 11 #"f-processed"
0 0 24 3 3 #") ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"h-list"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 10 #"let-values"
0 0 24 3 4 #" ([("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 11 #"s-processed"
0 0 24 3 3 #") ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 6 #"h-list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 11 #"f-processed"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 10 #"op->syntax"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"h-list"
0 0 24 3 6 #")))) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 11 #"f-processed"
0 0 24 3 1 #" "
0 0 14 3 11 #"s-processed"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"h-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 75
(
 #";it's never null but this is needed so that the monads don't go craz"
 #"y on ya"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 12 #"postfix-list"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 10 #"let-values"
0 0 24 3 4 #" ([("
0 0 14 3 6 #"prefix"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 12 #"postfix-list"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 6 #"prefix"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"move-operations"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 7 #"op-list"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"op-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 16 #"precedence-level"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 16 #"precedence-level"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"op-list"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 7 #"op-list"
0 0 24 3 2 #") "
0 0 14 3 6 #"output"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 15 #"move-operations"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"op-list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"op-list"
0 0 24 3 2 #") "
0 0 14 3 6 #"output"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"right-paren"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 3 #") ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"("
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"right-paren"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 2 #") "
0 0 14 3 3 #"out"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"binary-op/p"
0 0 24 3 1 #" "
0 0 14 3 6 #"single"
0 0 24 3 2 #" ["
0 0 14 3 10 #"start-expr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 4 #")] ["
0 0 14 3 8 #"start-op"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 6 #"binary"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"guard/p"
0 0 24 3 2 #" ("
0 0 14 3 14 #"postfix-list/p"
0 0 24 3 1 #" "
0 0 14 3 6 #"single"
0 0 24 3 1 #" "
0 0 14 3 10 #"start-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"start-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 5 #"cons?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"(\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"dict-keys"
0 0 24 3 1 #" "
0 0 14 3 18 #"binary-op-builtins"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 18 #"to-prefix-notation"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"binary"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"pure"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"postfix-list/p"
0 0 24 3 1 #" "
0 0 14 3 12 #"single-parse"
0 0 24 3 2 #" ["
0 0 14 3 10 #"start-expr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 4 #")] ["
0 0 14 3 8 #"start-op"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 1 #" "
0 0 14 3 10 #"last-expr?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 74
(
 #";if you encounter right paren, let the helper take care of it and co"
 #"ntinue"
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 10 #"last-expr?"
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 15 3 10 #"let-values"
0 0 24 3 4 #" ([("
0 0 14 3 7 #"op-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 3 #") ("
0 0 14 3 11 #"right-paren"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 7 #"op-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 17 3 53 #";this might mess up error reporting for this one case"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ["
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"operator"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"operator/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 15 3 10 #"let-values"
0 0 24 3 4 #" ([("
0 0 14 3 8 #"op-list*"
0 0 24 3 1 #" "
0 0 14 3 4 #"out*"
0 0 24 3 3 #") ("
0 0 14 3 15 #"move-operations"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"op-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"out"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"out*"
0 0 24 3 1 #" "
0 0 14 3 8 #"op-list*"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"op-list"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 6 #"fail/p"
0 0 24 3 2 #" ("
0 0 14 3 7 #"message"
0 0 24 3 2 #" ("
0 0 14 3 6 #"srcloc"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 19 3 2 #"\")"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"())))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"fail/p"
0 0 24 3 2 #" ("
0 0 14 3 7 #"message"
0 0 24 3 2 #" ("
0 0 14 3 6 #"srcloc"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 25 #";Otherwise, parse an expr"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 5 #"expr1"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 12 #"single-parse"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 36 #";see if there's another op after it."
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 36 #";if so, move-operations and continue"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"opr1"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"operator\""
0 0 24 3 1 #" "
0 0 14 3 10 #"operator/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 10 #"let-values"
0 0 24 3 4 #" ([("
0 0 14 3 7 #"op-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 3 #") ("
0 0 14 3 15 #"move-operations"
0 0 24 3 1 #" "
0 0 14 3 4 #"opr1"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 14 3 7 #"op-list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 70
(
 #";otherwise, there might be a right-paren so check that with the help"
 #"er"
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 2 #") "
0 0 14 3 10 #"operations"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 58
#";if no expressions were found, see if there's a left-paren"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"("
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 19 #";if not we're done."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 10 #"last-expr?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 2 #") "
0 0 14 3 6 #"output"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 10 #"start-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"start-op"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"lambda/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"lam\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 6 #"many/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 16 #"raw-identifier/p"
0 0 24 3 2 #") "
0 0 23 3 5 #"#:sep"
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 3 1 #" "
0 0 14 3 5 #"w-i/p"
0 0 24 3 2 #" ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\,"
0 0 24 3 2 #") "
0 0 14 3 5 #"w-i/p"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\:"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"#%lambda"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 4 #"body"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"record/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\{"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 7 #"entries"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"many/p"
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 5 #"field"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\:"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ["
0 0 14 3 7 #"binding"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"field"
0 0 24 3 1 #" "
0 0 14 3 7 #"binding"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 23 3 5 #"#:sep"
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 3 1 #" "
0 0 14 3 5 #"w-i/p"
0 0 24 3 2 #" ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\,"
0 0 24 3 2 #") "
0 0 14 3 5 #"w-i/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\}"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"#%record"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"user-block/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 9 #"syn-block"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"block\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\:"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 13 #"decorated-let"
0 0 24 3 2 #" ("
0 0 14 3 13 #"datum->syntax"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 21 3 1 #"'"
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 14 3 9 #"syn-block"
0 0 24 3 15 #")])            "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 7 #"#%block"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"if/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"if\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\:"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"else\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\:"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"end"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"#%if"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"top-level-block/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"comment/p"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 17 #"top-level-block/p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"end"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 6 #" input"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 5 #"eof/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"block-position/p"
0 0 24 3 2 #" ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"end"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 6 #" input"
0 0 19 3 1 #"\""
0 0 24 3 2 #"  "
0 0 14 3 5 #"eof/p"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"block-position/p"
0 0 24 3 2 #" ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"end\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"list-internal/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\,"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 15 #"list-internal/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"list/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\["
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 8 #"syn-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"list:\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 6 #"#%list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 8 #"internal"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 15 #"list-internal/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 6 #"#%list"
0 0 24 3 1 #" "
0 0 14 3 8 #"internal"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"array/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\["
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 8 #"syn-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"array:\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"#%to-array"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 8 #"internal"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 15 #"list-internal/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"#%to-array"
0 0 24 3 1 #" "
0 0 14 3 8 #"internal"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 5 #"for/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"for"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"try/p"
0 0 24 3 1 #" "
0 0 14 3 7 #"space/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 16 #"raw-identifier/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 7 #"space/p"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"in\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 7 #"in-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\:"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 16 #"block-position/p"
0 0 24 3 2 #" ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"end"
0 0 19 3 1 #"\""
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"#%for"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"in-list"
0 0 24 3 2 #") "
0 0 14 3 5 #"block"
0 0 24 3 14 #"))))))))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 49 #";not really prims I haven't changed the name yet."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 50 #";More like expressions, but without function apps."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"primitive/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 1 #" "
0 0 14 3 9 #"ML-arrays"
0 0 24 3 2 #" ("
0 0 14 3 7 #"array/p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 1 #" "
0 0 14 3 7 #"ML-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"list/p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"string\""
0 0 24 3 1 #" "
0 0 14 3 13 #"user-string/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"identifier"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 12 #"identifier/p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 7 #"label/p"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"number"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 8 #"number/p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"ML-for"
0 0 24 3 1 #" "
0 0 15 3 5 #"for/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 12 #"user-block/p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 1 #" "
0 0 14 3 9 #"ML-lambda"
0 0 24 3 1 #" "
0 0 14 3 8 #"lambda/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 1 #" "
0 0 14 3 9 #"ML-record"
0 0 24 3 1 #" "
0 0 14 3 8 #"record/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 1 #" "
0 0 14 3 5 #"ML-if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"if/p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 1 #" "
0 0 14 3 5 #"ML-if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"or/p"
0 0 24 3 2 #" ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"true"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"pure"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"pure"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"error-sequence-internal/p"
0 0 24 3 1 #" "
0 0 14 3 6 #"single"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 6 #"single"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\,"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 25 #"error-sequence-internal/p"
0 0 24 3 1 #" "
0 0 14 3 6 #"single"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"error-sequence/p"
0 0 24 3 1 #" "
0 0 14 3 6 #"single"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"ew-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 25 #"error-sequence-internal/p"
0 0 24 3 1 #" "
0 0 14 3 6 #"single"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"postfix/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"if-def-parse"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 9 #"ML-record"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\["
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 8 #"accessor"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"#%access"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 8 #"accessor"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 11 #"application"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 24 #"error-application-args/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 3 #"arg"
0 0 24 3 2 #" ("
0 0 14 3 12 #"syntax->list"
0 0 24 3 1 #" "
0 0 14 3 11 #"application"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"if-def-parse"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 9 #"ML-arrays"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\["
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 14 #"#%array-access"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"error-application-args/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 16 #"error-sequence/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 24 #"error-application-args/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"collect-postfixes/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 9 #"record-a?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 9 #"postfixed"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"postfix/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 19 #"collect-postfixes/p"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"syntax->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"postfixed"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"syntax->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"postfixed"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 9 #"record-a?"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"single-expression/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 11 #"primitive/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 8 #"prefixed"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 19 #"collect-postfixes/p"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"prefixed"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 59
#";can be used in function arguments for function application"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"binary-op/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"single-expression/p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";immediate end"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #";whitespace end"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 12 #";newline end"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 5 #";MAP:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 20 #";First thing can be:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 52 #";;;comment - cont but doesn't make function not last"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #";;;function - cont but can't be last"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #";;;identifier -"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #";;;;;;postfixed"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #";;;;;;;;;binary"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 28 #";;;;;;;;;record reassignment"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 18 #";;;;;;reassignment"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 13 #";;;;;;binding"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 12 #";;;;;;binary"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 21 #";;;other primitives -"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";;;;;postfixed"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 13 #";;;;;;;binary"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 26 #";;;;;;;record reassignment"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 11 #";;;;;binary"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 5 #";;;( "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 8 #";;;testI"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 8 #";;;testE"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 24 #";;;end but not the first"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 27 #"continue-block-need-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #" ["
0 0 14 3 9 #"last-fun?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 23 #"whitespace-no-newline/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 7 #"guard/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 9 #"last-fun?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Ended"
0 0 19 3 1 #" "
0 0 19 3 5 #"block"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"function"
0 0 19 3 8 #" binding"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 16 #"block-position/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 9 #"last-fun?"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 30 #"continue-block-already-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"block-position/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"whitespace-no-newline/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"many/p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"satisfy/p"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 16 #"char-whitespace?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"handle-record-reassign"
0 0 24 3 1 #" "
0 0 14 3 7 #"rec-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"record"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 7 #"rec-acc"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 5 #"field"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 7 #"rec-acc"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":="
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 7 #"binding"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 27 #"continue-block-need-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 16 #"#%reassign-field"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 1 #" "
0 0 14 3 5 #"field"
0 0 24 3 1 #" "
0 0 14 3 7 #"binding"
0 0 24 3 2 #") "
0 0 14 3 4 #"rest"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 34 #"whitespace-prefixed-binary-handler"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 24 #"whitespace-prefixed-op/p"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 6 #"binary"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 11 #"binary-op/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"single-expression/p"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 27 #"continue-block-need-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"binary"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 21 #";Handles Postfix case"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"handle-postfix"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 52 #";makes sure we fail this case if there is no postfix"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 35 #";collect postfixes does not do this"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 13 #"first-postfix"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"postfix/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"syn-list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"syntax->list"
0 0 24 3 1 #" "
0 0 14 3 13 #"first-postfix"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 9 #"postfixed"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 19 #"collect-postfixes/p"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"syn-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"syn-list"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 9 #"post-list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"syntax->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"postfixed"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 62
#";If the last postfix was record access instead of application,"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 35 #";we handle record reassignment here"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 6 #"spaces"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 23 #"whitespace-no-newline/p"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 7 #";CASES:"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 10 #";;;newline"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 11 #";;;;;binary"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 17 #";;;;;reassignment"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 17 #";;;;;plain access"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 15 #";;;plain-access"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 9 #";;;binary"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 15 #";;;reassignment"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 18 #";reassignment case"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"post-list"
0 0 24 3 4 #")) ("
0 0 14 3 22 #"handle-record-reassign"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"post-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 12 #";binary case"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 34 #"whitespace-prefixed-binary-handler"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"post-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 42 #";block continues, but we've seen a newline"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 30 #"continue-block-already-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"post-list"
0 0 24 3 2 #") "
0 0 14 3 4 #"rest"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 14 #";reassign case"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"post-list"
0 0 24 3 4 #")) ("
0 0 14 3 22 #"handle-record-reassign"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"post-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 12 #";binary case"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 6 #"spaces"
0 0 24 3 3 #") ("
0 0 14 3 34 #"whitespace-prefixed-binary-handler"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"post-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 27 #"continue-block-need-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"post-list"
0 0 24 3 2 #") "
0 0 14 3 4 #"rest"
0 0 24 3 10 #"))))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"handle-reassign"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #":=\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 7 #"binding"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 27 #"continue-block-need-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"#%reassign"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"binding"
0 0 24 3 2 #") "
0 0 14 3 4 #"rest"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"handle-bind"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 7 #"binding"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 22 #"at-least-one-newline/p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 16 #"block-position/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"#%let"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"binding"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"rest"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"handle-prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 3 #"id?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 13 #";postfix case"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 14 #"handle-postfix"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 6 #"spaces"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 23 #"whitespace-no-newline/p"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 7 #"newline"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"many/p"
0 0 24 3 2 #" ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 21 #";Handles reassignment"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"id?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"handle-reassign"
0 0 24 3 2 #" ("
0 0 14 3 8 #"strip-id"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 16 #";handles binding"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"id?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"handle-bind"
0 0 24 3 2 #" ("
0 0 14 3 8 #"strip-id"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 15 #";handles binary"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"if-def-parse"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 6 #"spaces"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 7 #"newline"
0 0 24 3 4 #")) ("
0 0 14 3 34 #"whitespace-prefixed-binary-handler"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 17 #";handles plain id"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 2 #"do"
0 0 24 3 2 #" ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 30 #"continue-block-already-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 2 #"do"
0 0 24 3 2 #" ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 27 #"continue-block-need-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"block-position/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #" ["
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"] ["
0 0 14 3 9 #"last-fun?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"or/p"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 76
(
 #";Handles comment case (at least for beginning of lines that aren't t"
 #"he last)"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"do"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hidden/p"
0 0 24 3 1 #" "
0 0 14 3 9 #"comment/p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 5 #"w-i/p"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 16 #"block-position/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 9 #"last-fun?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 41 #";Handles the ( case for starting binaries"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"do"
0 0 24 3 2 #" ("
0 0 14 3 6 #"char/p"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 6 #"binary"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 11 #"binary-op/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"single-expression/p"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"("
0 0 19 3 1 #"\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 16 #"block-position/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"binary"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 28 #";Handles the identifier case"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 12 #"identifier/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 11 #"handle-prim"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 22 #";handles the prim case"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 1 #" "
0 0 14 3 11 #"primitive/p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 11 #"handle-prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 18 #";handles functions"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"if-def-parse"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 7 #"ML-func"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 10 #"function/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 20 #";Options: Coninue on"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 27 #"continue-block-need-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hidden/p"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"~testI"
0 0 19 3 1 #"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 16 #"error-sequence/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 27 #"continue-block-need-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 7 #"#%testI"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 4 #"rest"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"try/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hidden/p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string/p"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"~testE"
0 0 19 3 1 #"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 16 #"error-sequence/p"
0 0 24 3 1 #" "
0 0 14 3 19 #"argument-position/p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 27 #"continue-block-need-newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 7 #"#%testE"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 4 #"rest"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"do"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"guard/p"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 6 #"empty?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 9 #"last-fun?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"empty?"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Empty"
0 0 19 3 6 #" block"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Ended"
0 0 19 3 1 #" "
0 0 19 3 5 #"block"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"function"
0 0 19 3 8 #" binding"
0 0 19 3 1 #"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"pure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 9 #";Success:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 13 #";Blank number"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 18 #";Number plus space"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 29 #";Number with all forms of end"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 9 #";prim + ("
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 56 #";the try/p on the fun makes all later options appear too"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 13 #";this is bad."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 35 #";It should commit after seeing fun."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 11 #"with-syntax"
0 0 24 3 3 #" (["
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 14 3 12 #"port->string"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 126
(
 #";Note this will allow for error highlighting unless the user puts mu"
 #"ltiple spaces between the #lang and the lang specification"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 21 #"syntax-start-position"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#lang \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 8 #"language"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 19 #"parse-syntax-string"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"syntax/p"
0 0 24 3 2 #" ("
0 0 14 3 17 #"top-level-block/p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 13 #"datum->syntax"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"str"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"src"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 21 #"syntax-start-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 21 #"syntax-start-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"parse-result!"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 8 #"expander"
0 0 24 3 2 #" ("
0 0 14 3 4 #"void"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 97
(
 #";In all weirdness, It looks like module expands it's first body befo"
 #"re passing it to module begin"
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 90
(
 #";(probably to see if it's a require or provide). I've put a void the"
 #"re to make it go away."
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 11 #"with-syntax"
0 0 24 3 4 #" ([("
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 14 3 4 #"code"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 8 #"language"
0 0 24 3 1 #" "
0 0 14 3 8 #"language"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 8 #"expander"
0 0 24 3 1 #" "
0 0 14 3 8 #"expander"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 11 #"module-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"module-name"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"mod-name-counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 21 #";(print #'(code ...))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"runAll"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"mod-name-counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 16 #"mod-name-counter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"to-print"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 13 #"strip-context"
0 0 24 3 1 #" "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 15 3 6 #"module"
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                  "
0 0 28 3 2 #"#,"
0 0 24 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 24 29 1 #"\n"
0 0 24 3 70
(
 #"                                                                    "
 #" ("
) 0 0 14 3 2 #"~a"
0 0 24 3 1 #" "
0 0 14 3 16 #"mod-name-counter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                                "
0 0 28 3 2 #"#,"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 8 #"expander"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 17 3 17 #";(print to-print)"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 8 #"to-print"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 6 #"runAll"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 13 #"strip-context"
0 0 24 3 1 #" "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 14 3 8 #"expander"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"              ))))))"
0 0 24 29 1 #"\n"
0           0
